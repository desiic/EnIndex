import eidb from"../../eidb.js";import base from"../base.js";import utils from"../utils.js";import op_hist from"./op-hist.js";import fts from"./fts.js";import ftss from"../idbxs/ftss.js";var log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock,json2obj=JSON.parse,obj2json=JSON.stringify;class crud{static async insert_one(e,t,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(e,eidb.RW).store1(),l={...t};delete l.id;var i=await r.add(l);return i instanceof Error?(loge("[EI] crud.insert_one: Failed, error:",i),null==r&&s.close(),null):(op_hist.update_op_hist_c(r.Name,[i]),a?ftss.update_fts_c(r.Name,i,n):fts.update_fts_c(r.Name,i,t),null==r&&s.close(),i)}static async insert_many(e,t,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(e,eidb.RW).store1(),l=[],[i,o]=new_lock();if(null==t||0==t.length)return s.close(),[];for(let e of t){let a={...e};delete a.id;let n=r.self.add(a);n.onerror=e=>{loge("[EI] crud.insert_many: Failed to add object, error:",e.target.error),l.push(null),l.length==t.length&&o()},n.onsuccess=e=>{l.push(e.target.result),l.length==t.length&&o()}}await i;for(let e=0;e<l.length;e++)a?ftss.update_fts_c(r.Name,l[e],n[e]):fts.update_fts_c(r.Name,l[e],t[e]);return s.close(),l}static async get_1stcond_obj(e,t){var a=Object.keys(t),n=e.index(a[0]);if(n instanceof Error)return loge("[EI] crud.get_1stcond_obj: Failed to get index, add this index to schema:",e.Name,"/",a[0]),null;var s=t[a[0]];return await n.get(s)}static async get_1stcond_objs(e,t){var a=Object.keys(t),n=e.index(a[0]);if(n instanceof Error)return loge("[EI] crud.get_1stcond_obj: Failed to get index, add this index to schema:",e.Name,"/",a[0]),null;var s=t[a[0]];return await n.get_all(s)}static async intersect_cond(e,t){var a=Object.keys(t);if(0==a.length)return[];var n=[];for(let s of a){let a=e.index(s);if(a instanceof Error)return loge("[EI] crud.get_1stcond_obj: Failed to get index, add this index to schema:",e.Name,"/",s),null;let r=t[s],l=(await a.get_all(r)).map((e=>e.id));n.push(l)}return utils.intersect_arrs(n)}static async intersect_cond_getobjs(e,t){var a=Object.keys(t);if(0==a.length)return[];var n=[],s={};for(let r of a){let a=e.index(r);if(a instanceof Error)return loge("[EI] crud.get_1stcond_obj: Failed to get index, add this index to schema:",e.Name,"/",r),null;let l=t[r],i=(await a.get_all(l)).map((e=>(s[e.id]=e,e.id)));n.push(i)}return utils.intersect_arrs(n).map((e=>s[e]))}static async exists(e,t,a=!1){var n=await eidb.reopen(),s=n.transaction(e,eidb.RO).store1(),r=Object.keys(t);if(0==r.length)return n.close(),[];if(1==r.length){let e=await crud.get_1stcond_obj(s,t);return n.close(),null!=e}var l=await crud.intersect_cond(s,t);return n.close(),l.length>0}static async count(e,t,a=!1){var n=await eidb.reopen(),s=n.transaction(e,eidb.RO).store1(),r=Object.keys(t);if(0==r.length)return n.close(),null;if(1==r.length){let e=await crud.get_1stcond_objs(s,t);return n.close(),e.length}var l=await crud.intersect_cond(s,t);return n.close(),l.length}static async count_all(e,t=!1){var a=await eidb.reopen(),n=a.transaction(e,eidb.RO).store1(),s=await n.count();return a.close(),s}static async find_one(e,t,a=!1){var n=await eidb.reopen(),s=n.transaction(e,eidb.RO).store1(),r=Object.keys(t);if(0==r.length)return n.close(),null;if(1==r.length){let e=await crud.get_1stcond_obj(s,t);return null==e?(n.close(),null):(op_hist.update_op_hist_r(s.Name,[e.id]),n.close(),e)}var l=await crud.intersect_cond(s,t);if(0==l.length)return n.close(),null;var i=await s.get(eidb.value_is(l[0]));return op_hist.update_op_hist_r(s.Name,l),n.close(),i}static async find_many(e,t,a=Number.MAX_SAFE_INTEGER,n=!1){var s=await eidb.reopen(),r=s.transaction(e,eidb.RO).store1(),l=Object.keys(t);if(0==l.length)return s.close(),null;if(1==l.length){let e=await crud.get_1stcond_objs(r,t);return s.close(),e}var i=await crud.intersect_cond(r,t);if(null==i||0==i.length)return s.close(),[];var o=[],[u,c]=new_lock();for(let e of i){let t=r.self.get(eidb.value_is(e).self);t.onerror=e=>{o.push(null),o.length==i.length&&c(),o.length>=a&&c()},t.onsuccess=e=>{o.push(e.target.result),o.length==i.length&&c(),o.length>=a&&c()}}return await u,s.close(),o}static async find_all(e,t=!1){var a=await eidb.reopen(),n=a.transaction(e,eidb.RO).store1(),s=await n.get_all();return a.close(),s}static get_proppath_value(e,t){var a=t.split("."),n=e;for(let e of a){if(null==n[e])return null;n=n[e]}return n}static obj_matches_cond(e,t){for(let a in t){let n=t[a],s=crud.get_proppath_value(e,a);if(null==s)return!1;if(-1==obj2json(s).indexOf(n))return!1}return!0}static async filter(e,t,a=Number.MAX_SAFE_INTEGER,n=!1){var s=await eidb.reopen(),r=s.transaction(e,eidb.RO).store1(),l=[];return await r.open_cursor(eidb.range_gte(0),"next",(e=>{var n=e.value;if(crud.obj_matches_cond(n,t)&&l.push(n),l.length>=a)return eidb._stop})),s.close(),l}static async update_one(e,t,a,n=!1,s=null){var r=await eidb.reopen(),l=r.transaction(e,eidb.RW).store1(),i=Object.keys(t);if(0==i.length)return r.close(),null;let o={...a};if(delete o.id,1==i.length){let e=await crud.get_1stcond_obj(l,t);return null==e?(r.close(),null):(e={...e,...o},l.put(e),op_hist.update_op_hist_u(l.Name,[e.id]),n?ftss.update_fts_u(l.Name,e.id,s):fts.update_fts_u(l.Name,e.id,e),r.close(),e)}var u=await crud.intersect_cond(l,t);if(null==u||0==u.length)return r.close(),null;var c=await l.get(eidb.value_is(u[0]));return null==c?(r.close(),null):(c={...c,...o},await l.put(c),op_hist.update_op_hist_u(l.Name,[c.id]),n?ftss.update_fts_u(l.Name,c.id,c):fts.update_fts_u(l.Name,c.id,c),r.close(),c)}static async update_many(e,t,a,n=Number.MAX_SAFE_INTEGER,s=!1){var r=await eidb.reopen(),l=r.transaction(e,eidb.RW).store1(),i=Object.keys(t);if(0==i.length)return r.close(),null;let o={...a};if(delete o.id,1==i.length){if(null==(u=await crud.get_1stcond_objs(l,t)))return r.close(),null;if(0==u.length)return r.close(),[]}else{var u;if(null==(u=await crud.intersect_cond_getobjs(l,t)))return r.close(),null;if(0==u.length)return r.close(),[]}let c=[],[d,_]=new_lock();for(let e of u){let t={...e,...o},a=l.self.put(t);a.onerror=t=>{loge("[EI] crud.update_many: Failed to update object:",e),c.push(null),c.length==u.length&&_(),c.length>=n&&_()},a.onsuccess=e=>{c.push({...t,id:e.target.result}),c.length==u.length&&_(),c.length>=n&&_()}}await d;for(let e=0;e<c.length;e++)s||fts.update_fts_u(l.Name,c[e].id,c[e]);return r.close(),c}static async upsert_one(e,t,a,n=!1,s=null){var r=await eidb.reopen(),l=r.transaction(e,eidb.RW).store1(),i=Object.keys(t);if(0==i.length)return r.close(),null;let o={...a};if(delete o.id,1==i.length){let e=await crud.get_1stcond_obj(l,t);if(null==e){let e=await l.add(o);return op_hist.update_op_hist_c(l.Name,[e]),n?ftss.update_fts_c(l.Name,e,s):fts.update_fts_c(l.Name,e,a),r.close(),e}return e={...e,...o},l.put(e),op_hist.update_op_hist_u(l.Name,[e.id]),n?ftss.update_fts_u(l.Name,e.id,s):fts.update_fts_u(l.Name,e.id,e),r.close(),e.id}var u=await crud.intersect_cond(l,t);if(null==u||0==u.length)return r.close(),null;var c=await l.get(eidb.value_is(u[0]));if(null==c){let e=await l.add(o);return op_hist.update_op_hist_c(l.Name,[e]),n?ftss.update_fts_c(l.Name,e,s):fts.update_fts_c(l.Name,e,a),r.close(),e}return c={...c,...o},l.put(c),op_hist.update_op_hist_u(l.Name,[c.id]),n?ftss.update_fts_u(l.Name,c.id,s):fts.update_fts_u(l.Name,c.id,c),r.close(),c.id}static async remove_one(e,t,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(e,eidb.RW).store1(),l=Object.keys(t);if(0==l.length)return s.close(),null;if(1==l.length){let e=await crud.get_1stcond_obj(r,t);if(null==e)return s.close(),null;let l=await r.delete(eidb.value_is(e.id));return op_hist.update_op_hist_d(r.Name,[e.id]),a?ftss.update_fts_d(r.Name,e.id,n):fts.update_fts_d(r.Name,e.id,e),s.close(),l}var i=await crud.intersect_cond_getobjs(r,t),o=i.map((e=>e.id));if(null==o||0==o.length)return s.close(),null;var u=await r.delete(eidb.value_is(o[0]));return op_hist.update_op_hist_d(r.Name,[o[0]]),a?ftss.update_fts_d(r.Name,o[0],n):fts.update_fts_d(r.Name,o[0],i[0]),s.close(),u}static async remove_many(e,t,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(e,eidb.RW).store1(),l=Object.keys(t);if(0==l.length)return s.close(),null;var i=[],o=[];if(1==l.length){if(i=await crud.get_1stcond_objs(r,t),o=i.map((e=>e.id)),null==i||0==i.length)return s.close(),null}else if(i=await crud.intersect_cond_getobjs(r,t),null==(o=i.map((e=>e.id)))||0==o.length)return s.close(),null;var[u,c]=new_lock(),d=0;for(let e of o){let t=r.self.delete(eidb.value_is(e).self);t.onerror=e=>{++d==o.length&&c()},t.onsuccess=e=>{++d==o.length&&c()}}await u;for(let e=0;e<o.length;e++)a?ftss.update_fts_d(r.Name,o[e],n[e]):fts.update_fts_d(r.Name,o[e],i[e]);return s.close(),null}static init(){}}export default crud;