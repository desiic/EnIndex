import base from"../base.js";import utils from"../utils.js";import op_hist from"./op-hist.js";import fts from"./fts.js";import ftss from"../idbxs/ftss.js";var log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock,json2obj=JSON.parse,obj2json=JSON.stringify;class crud{static async insert_one(t,e,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(t,RW).store1(),l={...e};delete l.id;var o=await r.add(l);return o instanceof Error?(loge("crud.insert_one: Failed, error:",o),null==r&&s.close(),null):(op_hist.update_op_hist_c(r.Name,[o]),a?ftss.update_fts_c(r.Name,o,n):fts.update_fts_c(r.Name,o,e),null==r&&s.close(),o)}static async insert_many(t,e,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(t,RW).store1(),l=[],[o,i]=new_lock();if(null==e||0==e.length)return s.close(),[];for(let t of e){let a={...t};delete a.id;let n=r.self.add(a);n.onerror=t=>{loge("crud.insert_many: Failed to add object, error:",t.target.error),l.push(null),l.length==e.length&&i()},n.onsuccess=t=>{l.push(t.target.result),l.length==e.length&&i()}}await o;for(let t=0;t<l.length;t++)a?ftss.update_fts_c(r.Name,l[t],n[t]):fts.update_fts_c(r.Name,l[t],e[t]);return s.close(),l}static async get_1stcond_obj(t,e){var a=Object.keys(e),n=t.index(a[0]);if(n instanceof Error)return loge("crud.get_1stcond_obj: Failed to get index, add this index to schema:",t.Name,"/",a[0]),null;var s=e[a[0]];return await n.get(s)}static async get_1stcond_objs(t,e){var a=Object.keys(e),n=t.index(a[0]);if(n instanceof Error)return loge("crud.get_1stcond_obj: Failed to get index, add this index to schema:",t.Name,"/",a[0]),null;var s=e[a[0]];return await n.get_all(s)}static async intersect_cond(t,e){var a=Object.keys(e);if(0==a.length)return[];var n=[];for(let s of a){let a=t.index(s);if(a instanceof Error)return loge("crud.get_1stcond_obj: Failed to get index, add this index to schema:",t.Name,"/",s),null;let r=e[s],l=(await a.get_all(r)).map((t=>t.id));n.push(l)}return utils.intersect_arrs(n)}static async intersect_cond_getobjs(t,e){var a=Object.keys(e);if(0==a.length)return[];var n=[],s={};for(let r of a){let a=t.index(r);if(a instanceof Error)return loge("crud.get_1stcond_obj: Failed to get index, add this index to schema:",t.Name,"/",r),null;let l=e[r],o=(await a.get_all(l)).map((t=>(s[t.id]=t,t.id)));n.push(o)}return utils.intersect_arrs(n).map((t=>s[t]))}static async exists(t,e,a=!1){var n=await eidb.reopen(),s=n.transaction(t,RO).store1(),r=Object.keys(e);if(0==r.length)return n.close(),[];if(1==r.length){let t=await crud.get_1stcond_obj(s,e);return n.close(),null!=t}var l=await crud.intersect_cond(s,e);return n.close(),l.length>0}static async count(t,e,a=!1){var n=await eidb.reopen(),s=n.transaction(t,RO).store1(),r=Object.keys(e);if(0==r.length)return n.close(),null;if(1==r.length){let t=await crud.get_1stcond_objs(s,e);return n.close(),t.length}var l=await crud.intersect_cond(s,e);return n.close(),l.length}static async count_all(t,e=!1){var a=await eidb.reopen(),n=a.transaction(t,RO).store1(),s=await n.count();return a.close(),s}static async find_one(t,e,a=!1){var n=await eidb.reopen(),s=n.transaction(t,RO).store1(),r=Object.keys(e);if(0==r.length)return n.close(),null;if(1==r.length){let t=await crud.get_1stcond_obj(s,e);return null==t?(n.close(),null):(op_hist.update_op_hist_r(s.Name,[t.id]),n.close(),t)}var l=await crud.intersect_cond(s,e);if(0==l.length)return n.close(),null;var o=await s.get(value_is(l[0]));return op_hist.update_op_hist_r(s.Name,l),n.close(),o}static async find_many(t,e,a=Number.MAX_SAFE_INTEGER,n=!1){var s=await eidb.reopen(),r=s.transaction(t,RO).store1(),l=Object.keys(e);if(0==l.length)return s.close(),null;if(1==l.length){let t=await crud.get_1stcond_objs(r,e);return s.close(),t}var o=await crud.intersect_cond(r,e);if(null==o||0==o.length)return s.close(),[];var i=[],[u,c]=new_lock();for(let t of o){let e=r.self.get(value_is(t).self);e.onerror=t=>{i.push(null),i.length==o.length&&c(),i.length>=a&&c()},e.onsuccess=t=>{i.push(t.target.result),i.length==o.length&&c(),i.length>=a&&c()}}return await u,s.close(),i}static async find_all(t,e=!1){var a=await eidb.reopen(),n=a.transaction(t,RO).store1(),s=await n.get_all();return a.close(),s}static get_proppath_value(t,e){var a=e.split("."),n=t;for(let t of a){if(null==n[t])return null;n=n[t]}return n}static obj_matches_cond(t,e){for(let a in e){let n=e[a],s=crud.get_proppath_value(t,a);if(null==s)return!1;if(-1==obj2json(s).indexOf(n))return!1}return!0}static async filter(t,e,a=Number.MAX_SAFE_INTEGER,n=!1){var s=await eidb.reopen(),r=s.transaction(t,RO).store1(),l=[];return await r.open_cursor(range_gte(0),"next",(t=>{var n=t.value;if(crud.obj_matches_cond(n,e)&&l.push(n),l.length>=a)return _stop})),s.close(),l}static async update_one(t,e,a,n=!1,s=null){var r=await eidb.reopen(),l=r.transaction(t,RW).store1(),o=Object.keys(e);if(0==o.length)return r.close(),null;let i={...a};if(delete i.id,1==o.length){let t=await crud.get_1stcond_obj(l,e);return null==t?(r.close(),null):(t={...t,...i},l.put(t),op_hist.update_op_hist_u(l.Name,[t.id]),n?ftss.update_fts_u(l.Name,t.id,s):fts.update_fts_u(l.Name,t.id,t),r.close(),t)}var u=await crud.intersect_cond(l,e);if(null==u||0==u.length)return r.close(),null;var c=await l.get(value_is(u[0]));return null==c?(r.close(),null):(c={...c,...i},await l.put(c),op_hist.update_op_hist_u(l.Name,[c.id]),n?ftss.update_fts_u(l.Name,c.id,c):fts.update_fts_u(l.Name,c.id,c),r.close(),c)}static async update_many(t,e,a,n=Number.MAX_SAFE_INTEGER,s=!1){var r=await eidb.reopen(),l=r.transaction(t,RW).store1(),o=Object.keys(e);if(0==o.length)return r.close(),null;let i={...a};if(delete i.id,1==o.length){if(null==(u=await crud.get_1stcond_objs(l,e)))return r.close(),null;if(0==u.length)return r.close(),[]}else{var u;if(null==(u=await crud.intersect_cond_getobjs(l,e)))return r.close(),null;if(0==u.length)return r.close(),[]}let c=[],[d,_]=new_lock();for(let t of u){let e={...t,...i},a=l.self.put(e);a.onerror=e=>{loge("crud.update_many: Failed to update object:",t),c.push(null),c.length==u.length&&_(),c.length>=n&&_()},a.onsuccess=t=>{c.push({...e,id:t.target.result}),c.length==u.length&&_(),c.length>=n&&_()}}await d;for(let t=0;t<c.length;t++)s||fts.update_fts_u(l.Name,c[t].id,c[t]);return r.close(),c}static async upsert_one(t,e,a,n=!1,s=null){var r=await eidb.reopen(),l=r.transaction(t,RW).store1(),o=Object.keys(e);if(0==o.length)return r.close(),null;let i={...a};if(delete i.id,1==o.length){let t=await crud.get_1stcond_obj(l,e);if(null==t){let t=await l.add(i);return op_hist.update_op_hist_c(l.Name,[t]),n?ftss.update_fts_c(l.Name,t,s):fts.update_fts_c(l.Name,t,a),r.close(),t}return t={...t,...i},l.put(t),op_hist.update_op_hist_u(l.Name,[t.id]),n?ftss.update_fts_u(l.Name,t.id,s):fts.update_fts_u(l.Name,t.id,t),r.close(),t.id}var u=await crud.intersect_cond(l,e);if(null==u||0==u.length)return r.close(),null;var c=await l.get(value_is(u[0]));if(null==c){let t=await l.add(i);return op_hist.update_op_hist_c(l.Name,[t]),n?ftss.update_fts_c(l.Name,t,s):fts.update_fts_c(l.Name,t,a),r.close(),t}return c={...c,...i},l.put(c),op_hist.update_op_hist_u(l.Name,[c.id]),n?ftss.update_fts_u(l.Name,c.id,s):fts.update_fts_u(l.Name,c.id,c),r.close(),c.id}static async remove_one(t,e,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(t,RW).store1(),l=Object.keys(e);if(0==l.length)return s.close(),null;if(1==l.length){let t=await crud.get_1stcond_obj(r,e);if(null==t)return s.close(),null;let l=await r.delete(value_is(t.id));return op_hist.update_op_hist_d(r.Name,[t.id]),a?ftss.update_fts_d(r.Name,t.id,n):fts.update_fts_d(r.Name,t.id,t),s.close(),l}var o=await crud.intersect_cond_getobjs(r,e),i=o.map((t=>t.id));if(null==i||0==i.length)return s.close(),null;var u=await r.delete(value_is(i[0]));return op_hist.update_op_hist_d(r.Name,[i[0]]),a?ftss.update_fts_d(r.Name,i[0],n):fts.update_fts_d(r.Name,i[0],o[0]),s.close(),u}static async remove_many(t,e,a=!1,n=null){var s=await eidb.reopen(),r=s.transaction(t,RW).store1(),l=Object.keys(e);if(0==l.length)return s.close(),null;var o=[],i=[];if(1==l.length){if(o=await crud.get_1stcond_objs(r,e),i=o.map((t=>t.id)),null==o||0==o.length)return s.close(),null}else if(o=await crud.intersect_cond_getobjs(r,e),null==(i=o.map((t=>t.id)))||0==i.length)return s.close(),null;var[u,c]=new_lock(),d=0;for(let t of i){let e=r.self.delete(value_is(t).self);e.onerror=t=>{++d==i.length&&c()},e.onsuccess=t=>{++d==i.length&&c()}}await u;for(let t=0;t<i.length;t++)a?ftss.update_fts_d(r.Name,i[t],n[t]):fts.update_fts_d(r.Name,i[t],o[t]);return s.close(),null}static init(){}}export default crud;