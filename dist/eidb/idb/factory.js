import eidb from"../../eidb.js";import base from"../base.js";import database from"./database.js";import transaction from"./transaction.js";var log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock;class factory{self=null;constructor(e){this.self=e}async databases(){try{return await this.self.databases()}catch(e){return loge("[EI] factory.databases: Error:",e),e}}async delete_database(e){var o=this.self.deleteDatabase(e),[r,n]=new_lock();return o.onerror=function(e){n(e.target.error)},o.onsuccess=function(e){n(null)},await r}async open(e,o){try{var r=this.self.open(e,o)}catch(e){return loge("[EI] idb.open: Error caught:",e),e.Status="errored",e}var[n,t]=new_lock(),a=null,s=null,l=null;r.onerror=function(e){a=e.target.error,t("errored")},r.onblocked=function(e){logw(`[EI] idb.open: Upgrade blocked, requested to change to version ${o}`),logw("[EI] Check source code, shouldn't be blocked by connections in current tab or other tabs."),logw("[EI] Tip: Avoid being blocked by using temporary connections in all tabs together with IDBDatabase.versionchange event."),s=e,t("blocked"),l="blocked"},r.onupgradeneeded=function(e){if(null!=l)return logw(`[EI] idb.open: Upgrade cancelled due to '${l}' event fired right previously`),void t();log(`[EI] idb.open: Upgrade needed, to version ${o}`),t("to-upgrade"),l="to-upgrade"},r.onsuccess=function(e){if(null!=l)return logw(`[EI] idb.open: Open cancelled due to '${l}' event fired right previously`),void t();t("opened")};var d=await n;if("errored"==d)return a.Status="errored",a;if("blocked"==d){let e=new Error("Upgrade is blocked by other connections, close them all first.");return e.Status="blocked",e.Event=s,e}if("to-upgrade"==d){let e=new database(r.result);return e.to_upgrade=!0,e.Transaction=new transaction(r.transaction),null==eidb._num_db_cons?eidb._num_db_cons=1:eidb._num_db_cons+=1,e}if("opened"==d){let e=new database(r.result);return e.to_upgrade=!1,null==eidb._num_db_cons?eidb._num_db_cons=1:eidb._num_db_cons+=1,e}}}export default factory;