import base from"./base.js";var log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock;const BIT_LEN=256,FIXED_IV_BYTES=new Uint8Array([0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45]),FIXED_IV="000306090c0f1215181b1e2124272a2d";class wcrypto{static BIT_LEN=256;static FIXED_IV_BYTES=FIXED_IV_BYTES;static FIXED_IV=FIXED_IV;static EXTERNAL_LIBS(){}static async get_pubkey_point(t){var[e,r]=new_lock();return setTimeout((()=>{null==window.elliptic&&loge("[EI] wcrypto.get_pubkey_point: No Elliptic lib found.")}),3e4),setTimeout((function e(){if(null!=window.elliptic){for(var a=elliptic.ec("p256").keyFromPrivate(t).getPublic(),o=a.getX().toString(16),n=a.getY().toString(16);o.length<64;)o="0"+o;for(;n.length<64;)n="0"+n;r([o,n])}else setTimeout(e,0)}),0),await e}static BASE_FUNCS(){}static get_random_values_unsigned(t,e){if(8==t||16==t||32==t||64==t){if(8==t)var r=new Uint8Array(e);if(16==t)r=new Uint16Array(e);if(32==t)r=new Uint32Array(e);if(64==t)r=new BigUint64Array(e);return window.crypto.getRandomValues(r),r}loge("[EI] wcrypto.get_random_values_unsigned: Bits must be 8, 16, 32, or 64")}static get_random_values_signed(t,e){if(8==t||16==t||32==t||64==t){if(8==t)var r=new Int8Array(e);if(16==t)r=new Int16Array(e);if(32==t)r=new Int32Array(e);if(64==t)r=new BigInt64Array(e);return window.crypto.getRandomValues(r),r}loge("[EI] wcrypto.get_random_values_signed: Bits must be 8, 16, 32, or 64")}static random_iv(){return wcrypto.get_random_values_unsigned(8,16)}static random_uuid(){return window.crypto.randomUUID()}static random_uuidx(){return(window.crypto.randomUUID()+window.crypto.randomUUID()).replaceAll("-","")}static UTILS(){}static base64url_to_base64(t){return t.replaceAll("-","+").replaceAll("_","/")}static base64_to_base64url(t){return t.replaceAll("+","-").replaceAll("/","_").replaceAll("=","")}static utf8_to_bytes(t){return(new TextEncoder).encode(t)}static bytes_to_utf8(t){return new TextDecoder("utf-8").decode(t)}static buff_to_bytes(t){return new Uint8Array(t)}static bytes_to_buff(t){return t.buffer}static buff_to_hex(t){return[...new Uint8Array(t)].map((t=>t.toString(16).padStart(2,"0"))).join("")}static hex_to_buff(t){return wcrypto.hex_to_bytes(t).buffer}static bytes_to_hex(t){return[...t].map((t=>t.toString(16).padStart(2,"0"))).join("")}static hex_to_bytes(t){var e=new Uint8Array(t.length/2);for(let r=0;r<e.byteLength;r++)e[r]=parseInt(t.substring(2*r,2*r+2),16);return e}static buff_to_base64(t){for(var e=new Uint8Array(t),r=e.byteLength,a="",o=0;o<r;o++)a+=String.fromCharCode(e[o]);return window.btoa(a)}static base64_to_buff(t){var e=window.atob(t),r=new Uint8Array(e.length);for(let t=0;t<r.byteLength;t++)r[t]=e.charCodeAt(t);return r.buffer}static bytes_to_base64(t){var e=t.byteLength,r="";for(let a=0;a<e;a++)r+=String.fromCharCode(t[a]);return window.btoa(r)}static base64_to_bytes(t){var e=window.atob(t),r=new Uint8Array(e.length);for(let t=0;t<r.byteLength;t++)r[t]=e.charCodeAt(t);return r}static base64_to_hex(t){return wcrypto.bytes_to_hex(wcrypto.base64_to_bytes(t))}static hex_to_base64(t){return wcrypto.bytes_to_base64(wcrypto.hex_to_bytes(t))}static base64url_to_hex(t){return t=wcrypto.base64url_to_base64(t),wcrypto.bytes_to_hex(wcrypto.base64_to_bytes(t))}static hex_to_base64url(t){var e=wcrypto.bytes_to_base64(wcrypto.hex_to_bytes(t));return wcrypto.base64_to_base64url(e)}static SUBTLE(){}static async digest_sha1(t){var e=wcrypto.utf8_to_bytes(t),r=await window.crypto.subtle.digest("SHA-1",e);return this.buff_to_hex(r)}static async digest_sha256(t){var e=wcrypto.utf8_to_bytes(t),r=await window.crypto.subtle.digest("SHA-256",e);return this.buff_to_hex(r)}static async generate_key_aes(){var t={name:"AES-GCM",length:256};return await window.crypto.subtle.generateKey(t,!0,["encrypt","decrypt"])}static async generate_key_aes_kw(){var t={name:"AES-KW",length:256};return await window.crypto.subtle.generateKey(t,!0,["wrapKey","unwrapKey"])}static async generate_keys_rsa_ed(){var t={name:"RSA-OAEP",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-256"};return await window.crypto.subtle.generateKey(t,!0,["encrypt","decrypt"])}static async generate_keys_rsa_sv(){var t={name:"RSA-PSS",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-256"};return await window.crypto.subtle.generateKey(t,!0,["sign","verify"])}static async generate_keys_ec_ed(){}static async generate_keys_ec_sv(){return await window.crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"])}static async import_key_pb_raw(t){var e=wcrypto.utf8_to_bytes(t);try{var r=await window.crypto.subtle.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits","deriveKey"])}catch(t){return loge("[EI] wcrypto.import_key_pb_raw: Failed to import, error:",t),null}return r}static async import_key_aes_raw(t){if(64!=t.length)return loge("[EI] wcrypto.import_key_raw: Hex of key must be of length 64 chars"),null;var e=wcrypto.hex_to_bytes(t);try{var r=await window.crypto.subtle.importKey("raw",e,{name:"AES-GCM"},!0,["encrypt","decrypt"])}catch(t){return loge("[EI] wcrypto.import_key_aes_raw: Failed to import, error:",t),null}return r}static async import_key_rsa_jwk(t,e="RSA-PSS"){var r={name:e,hash:"SHA-256"};if("RSA-OAEP"==e)var a=["encrypt","decrypt"];else a=["sign","verify"];try{return await window.crypto.subtle.importKey("jwk",t,r,!0,a)}catch(t){return loge("[EI] wcrypto.import_key_rsa_jwk: Failed to import, error:",t),null}}static async import_key_ec_jwk(t,e="ECDSA"){var r={name:e,namedCurve:"P-256"};if(null!=t.d)var a=["sign"];else a=["verify"];try{return await window.crypto.subtle.importKey("jwk",t,r,!0,a)}catch(t){return loge("[EI] wcrypto.import_key_ec_jwk: Failed to import, error:",t),null}}static async export_key_hex(t){return wcrypto.buff_to_hex(await window.crypto.subtle.exportKey("raw",t))}static async export_key_jwk(t){try{return await window.crypto.subtle.exportKey("jwk",t)}catch(t){return loge("[EI] wcrypto.export_key_jwk: Failed to export, error:",t),null}}static async derive_bits_pb(t,e,r,a=256){var o=await wcrypto.import_key_pb_raw(t),n={name:"PBKDF2",hash:"SHA-256",salt:wcrypto.utf8_to_bytes(e),iterations:r};try{var c=await window.crypto.subtle.deriveBits(n,o,a);return wcrypto.buff_to_hex(c)}catch(t){return loge("[EI] wcrypto.derive_bits_pb: Failed to derive, error:",t),null}}static async derive_key_pb2aes(t,e,r){var a=await wcrypto.import_key_pb_raw(t),o={name:"PBKDF2",hash:"SHA-256",salt:wcrypto.utf8_to_bytes(e),iterations:r};try{return await window.crypto.subtle.deriveKey(o,a,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}catch(t){return loge("[EI] wcrypto.derive_key_pb2aes: Failed to derive, error:",t),null}}static async derive_keys_pb2rsa(t,e,r){}static async derive_keys_pb2ec(t,e,r){BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"),BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"),BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"),BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"),BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"),BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"),BigInt("0x01");var a=await wcrypto.generate_keys_ec_sv(),o=await wcrypto.export_key_jwk(a.privateKey),n=await wcrypto.export_key_jwk(a.publicKey),c=t+e;for(let t=0;t<r;t++)c=await wcrypto.digest_sha256(c);var[i,s]=await wcrypto.get_pubkey_point(c);return c=wcrypto.hex_to_base64url(c),i=wcrypto.hex_to_base64url(i),s=wcrypto.hex_to_base64url(s),o.d=c,o.x=i,o.y=s,n.x=i,n.y=s,{privateKey:await wcrypto.import_key_ec_jwk(o,"ECDSA"),publicKey:await wcrypto.import_key_ec_jwk(n,"ECDSA")}}static async encrypt_aes(t,e,r=null){if(null==r)var a=wcrypto.random_iv();else a=wcrypto.hex_to_bytes(r);var o=wcrypto.utf8_to_bytes(t),n={name:"AES-GCM",iv:a};try{var c=await window.crypto.subtle.encrypt(n,e,o)}catch(t){return loge("[EI] wcrypto.encrypt_aes: Failed to encrypt, error:",t),null}return[wcrypto.buff_to_base64(c),wcrypto.bytes_to_hex(a)]}static async encrypt_aes_fiv(t,e){return await wcrypto.encrypt_aes(t,e,thisclass.FIXED_IV)}static async encrypt_rsa(t,e){var r=wcrypto.utf8_to_bytes(t);try{var a=await window.crypto.subtle.encrypt({name:"RSA-OAEP"},e,r)}catch(t){return loge("[EI] wcrypto.encrypt_rsa: Failed to encrypt, error:",t),null}return wcrypto.buff_to_base64(a)}static async encrypt_ec(t,e){}static async decrypt_aes(t,e,r){var a=wcrypto.base64_to_bytes(t),o={name:"AES-GCM",iv:wcrypto.hex_to_bytes(e)};try{var n=await window.crypto.subtle.decrypt(o,r,a)}catch(t){return loge("[EI] wcrypto.decrypt_aes: Failed to decrypt, error:",t),null}return wcrypto.bytes_to_utf8(new Uint8Array(n))}static async decrypt_aes_fiv(t,e){return await wcrypto.decrypt_aes(t,thisclass.FIXED_IV,e)}static async decrypt_rsa(t,e){var r=wcrypto.base64_to_bytes(t);try{var a=await window.crypto.subtle.decrypt({name:"RSA-OAEP"},e,r)}catch(t){return loge("[EI] wcrypto.decrypt_rsa: Failed to decrypt, error:",t),null}return wcrypto.bytes_to_utf8(new Uint8Array(a))}static async decrypt_ec(t,e){}static async sign(t,e){if("RSA-PSS"==e.algorithm.name)var r={name:"RSA-PSS",saltLength:256};else r={name:"ECDSA",hash:"SHA-256"};var a=wcrypto.utf8_to_bytes(t);try{var o=await window.crypto.subtle.sign(r,e,a)}catch(t){return loge("[EI] wcrypto.sign: Failed to sign, error:",t),null}return wcrypto.buff_to_hex(o)}static async verify(t,e,r){if("RSA-PSS"==r.algorithm.name)var a={name:"RSA-PSS",saltLength:256};else a={name:"ECDSA",hash:"SHA-256"};var o=wcrypto.utf8_to_bytes(t),n=wcrypto.hex_to_bytes(e);try{return await window.crypto.subtle.verify(a,r,n,o)}catch(t){return loge("[EI] wcrypto.verify: Failed to verify, error:",t),null}}static async wrap_key(){}static async unwrap_key(){}static EXTENDED(){}static split_into_2(t){var e=Math.floor(t.length/2);return[t.substring(0,e),t.substring(e)]}static async password2keys(t,e,r){var a=await wcrypto.derive_bits_pb(t,e,r,512),[o,n]=wcrypto.split_into_2(a);return[await wcrypto.derive_key_pb2aes(o,e,r),await wcrypto.derive_keys_pb2ec(n,e,r)]}static async make_static_key(t,e){var r=wcrypto.random_uuidx();return await wcrypto.derive_key_pb2aes(r,t,e)}static init(){}}const thisclass=wcrypto;export default thisclass;