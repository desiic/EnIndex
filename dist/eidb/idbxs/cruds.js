import eidb from"../../eidb.js";import base from"../base.js";import crud from"../idbx/crud.js";import fts from"../idbx/fts.js";import idbxs from"../idbxs.js";import wcrypto from"../wcrypto.js";import utils from"../utils.js";const log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock,_secure=!0;class cruds{static async insert_one(t,a){if(null!=idbxs.Skey){t="#"+t;var i=await idbxs.obj_to_sobj(t,a);return await crud.insert_one(t,i,true,a)}loge("[EI] cruds.insert_one: Static key not set")}static async insert_many(t,a){if(null!=idbxs.Skey){t="#"+t;var i=[];for(let e of a)i.push(await idbxs.obj_to_sobj(t,e));return await crud.insert_many(t,i,true,a)}loge("[EI] cruds.insert_many: Static key not set")}static async get_1stcond_obj(t,a){}static async get_1stcond_objs(t,a){}static async intersect_cond(t,a){}static async intersect_cond_getobjs(t,a){}static async exists(t,a){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)"id"==t?i[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);return await crud.exists(t,i,true)}loge("[EI] cruds.exists: Static key not set")}static async count(t,a){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)"id"==t?i[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);return await crud.count(t,i,true)}loge("[EI] cruds.count: Static key not set")}static async count_all(t){if(null!=idbxs.Skey)return t="#"+t,await crud.count_all(t,true);loge("[EI] cruds.count_all: Static key not set")}static async find_one(t,a){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)"id"==t?i[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);var e=await crud.find_one(t,i,true);if(null==e)return null;var s=await wcrypto.decrypt_aes_fiv(e.Etds_Obj,idbxs.Skey),r=utils.json_to_obj_bd(s);return r.id=e.id,r}loge("[EI] cruds.find_one: Static key not set")}static async find_many(t,a,i=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)"id"==t?e[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var s=await crud.find_many(t,e,i,true),r=[];for(let t of s){var o=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),n=utils.json_to_obj_bd(o);n.id=t.id,r.push(n)}return r}loge("[EI] cruds.find_many: Static key not set")}static async find_all(t){if(null!=idbxs.Skey){t="#"+t;var a=await crud.find_all(t,true),i=[];for(let t of a){var e=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey);if(null!=e){var s=utils.json_to_obj_bd(e);s.id=t.id,i.push(s)}}return i}loge("[EI] cruds.find_all: Static key not set")}static get_proppath_value(t,a){}static obj_matches_cond(t,a){}static async filter(t,a,i=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)e[t]="id"==t?a[t]:await idbxs.value_to_svalue(a[t]);var s=await crud.filter(t,e,i,true),r=[];for(let t of s){var o=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),n=utils.json_to_obj_bd(o);n.id=t.id,r.push(n)}return r}loge("[EI] cruds.filter: Static key not set")}static async update_one(t,a,i){if(null!=idbxs.Skey){t="#"+t;var e=await idbxs.obj_to_sobj_arb(i),s={};for(let t in a)"id"==t?s[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?s[t]=await idbxs.array_to_sarray(a[t]):s[t]=await idbxs.value_to_svalue(a[t]);var r=await crud.find_one(t,s,true),o=await wcrypto.decrypt_aes_fiv(r.Etds_Obj,idbxs.Skey),n=utils.json_to_obj_bd(o);n={...n,...i},o=utils.obj_to_json(n),e.Etds_Obj=(await wcrypto.encrypt_aes_fiv(o,idbxs.Skey))[0];var d=await crud.update_one(t,s,e,true,n);o=await wcrypto.decrypt_aes_fiv(d.Etds_Obj,idbxs.Skey);return(n=utils.json_to_obj_bd(o)).id=d.id,n}loge("[EI] cruds.update_one: Static key not set")}static async update_many(t,a,i,e=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var s=utils.deepcopy(i);delete s.id,i=s;var r=await idbxs.obj_to_sobj_arb(i),o=[],n={};for(let t in a)"id"==t?n[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?n[t]=await idbxs.array_to_sarray(a[t]):n[t]=await idbxs.value_to_svalue(a[t]);var d=await crud.find_many(t,n,true),_=[];for(let t of d){let a=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),e=utils.json_to_obj_bd(a);e={...e,...i,id:t.id},a=utils.obj_to_json(e),_.push(e);let s=utils.deepcopy(r);s.Etds_Obj=(await wcrypto.encrypt_aes_fiv(a,idbxs.Skey))[0],o.push(s)}var u=await eidb.reopen(),c=u.transaction(t,eidb.RW).store1(),l=0,y=[],[b,f]=new_lock();for(let a=0;a<d.length;a++){let i,e={...d[a],...o[a]};c.put(e,null,i=!1,(i=>{i instanceof Error?(loge("[EI] cruds.update_many: Error:",i),y.push(null)):y.push(e),fts.update_fts_u(t,_[a].id,_[a]),++l==d.length&&f()}))}await b;var w=[];for(let t of y){let a=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),i=utils.json_to_obj_bd(a);i.id=t.id,w.push(i)}return u.close(),w}loge("[EI] cruds.update_many: Static key not set")}static async upsert_one(t,a,i){if(null!=idbxs.Skey){t="#"+t;var e=await idbxs.obj_to_sobj_arb(i),s={};for(let t in a)"id"==t?s[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?s[t]=await idbxs.array_to_sarray(a[t]):s[t]=await idbxs.value_to_svalue(a[t]);var r=await crud.find_one(t,s,true),o=await wcrypto.decrypt_aes_fiv(r.Etds_Obj,idbxs.Skey),n=utils.json_to_obj_bd(o);return n={...n,...i},o=utils.obj_to_json(n),e.Etds_Obj=(await wcrypto.encrypt_aes_fiv(o,idbxs.Skey))[0],await crud.upsert_one(t,s,e,true,n)}loge("[EI] cruds.upsert_one: Static key not set")}static async remove_one(t,a){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)"id"==t?i[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);var e=await crud.find_one(t,i,true);if(null==e)return null;var s=await wcrypto.decrypt_aes_fiv(e.Etds_Obj,idbxs.Skey),r=utils.json_to_obj_bd(s);r.id=e.id,await crud.remove_one(t,i,true,r)}else loge("[EI] cruds.remove_one: Static key not set")}static async remove_many(t,a){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)"id"==t?i[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);var e=[],s=await crud.find_many(t,i,true);if(null==s||0==s.length)return null;for(let t of s){var r=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),o=utils.json_to_obj_bd(r);o.id=t.id,e.push(o)}await crud.remove_many(t,i,true,e)}else loge("[EI] cruds.remove_many: Static key not set")}static init(){}}export default cruds;