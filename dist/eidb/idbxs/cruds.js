import base from"../base.js";import crud from"../idbx/crud.js";import fts from"../idbx/fts.js";import idbxs from"../idbxs.js";import wcrypto from"../wcrypto.js";import utils from"../utils.js";const log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock;class cruds{static async insert_one(t,a){if(null!=idbxs.Skey){t="#"+t;var e=await idbxs.obj_to_sobj(t,a);return await crud.insert_one(t,e,_secure,a)}loge("cruds.insert_one: Static key not set")}static async insert_many(t,a){if(null!=idbxs.Skey){t="#"+t;var e=[];for(let s of a)e.push(await idbxs.obj_to_sobj(t,s));return await crud.insert_many(t,e,_secure,a)}loge("cruds.insert_many: Static key not set")}static async get_1stcond_obj(t,a){}static async get_1stcond_objs(t,a){}static async intersect_cond(t,a){}static async intersect_cond_getobjs(t,a){}static async exists(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);return await crud.exists(t,e,_secure)}loge("cruds.exists: Static key not set")}static async count(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);return await crud.count(t,e,_secure)}loge("cruds.count: Static key not set")}static async count_all(t){if(null!=idbxs.Skey)return t="#"+t,await crud.count_all(t,_secure);loge("cruds.count_all: Static key not set")}static async find_one(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var s=await crud.find_one(t,e,_secure);if(null==s)return null;var i=await wcrypto.decrypt_aes_fiv(s.Etds_Obj,idbxs.Skey),r=utils.json_to_obj_bd(i);return r.id=s.id,r}loge("cruds.find_one: Static key not set")}static async find_many(t,a,e=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var s={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?s[t]=await idbxs.array_to_sarray(a[t]):s[t]=await idbxs.value_to_svalue(a[t]);var i=await crud.find_many(t,s,e,_secure),r=[];for(let t of i){var o=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);_.id=t.id,r.push(_)}return r}loge("cruds.find_many: Static key not set")}static async find_all(t){if(null!=idbxs.Skey){t="#"+t;var a=await crud.find_all(t,_secure),e=[];for(let t of a){var s=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey);if(null!=s){var i=utils.json_to_obj_bd(s);i.id=t.id,e.push(i)}}return e}loge("cruds.find_all: Static key not set")}static get_proppath_value(t,a){}static obj_matches_cond(t,a){}static async filter(t,a,e=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var s={};for(let t in a)s[t]=await idbxs.value_to_svalue(a[t]);var i=await crud.filter(t,s,e,_secure),r=[];for(let t of i){var o=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);_.id=t.id,r.push(_)}return r}loge("cruds.filter: Static key not set")}static async update_one(t,a,e){if(null!=idbxs.Skey){t="#"+t;var s=await idbxs.obj_to_sobj_full(e),i={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);var r=await crud.find_one(t,i,_secure),o=await wcrypto.decrypt_aes_fiv(r.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);_={..._,...e},o=utils.obj_to_json(_),s.Etds_Obj=(await wcrypto.encrypt_aes_fiv(o,idbxs.Skey))[0];var n=await crud.update_one(t,i,s,_secure,_);o=await wcrypto.decrypt_aes_fiv(n.Etds_Obj,idbxs.Skey);return(_=utils.json_to_obj_bd(o)).id=n.id,_}loge("cruds.update_one: Static key not set")}static async update_many(t,a,e,s=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var i=utils.deepcopy(e);delete i.id,e=i;var r=await idbxs.obj_to_sobj_full(e),o=[],_={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?_[t]=await idbxs.array_to_sarray(a[t]):_[t]=await idbxs.value_to_svalue(a[t]);var n=await crud.find_many(t,_,_secure),d=[];for(let t of n){let a=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),s=utils.json_to_obj_bd(a);s={...s,...e,id:t.id},a=utils.obj_to_json(s),d.push(s);let i=utils.deepcopy(r);i.Etds_Obj=(await wcrypto.encrypt_aes_fiv(a,idbxs.Skey))[0],o.push(i)}var c=await eidb.reopen(),u=c.transaction(t,RW).store1(),l=0,y=[],[b,f]=new_lock();for(let a=0;a<n.length;a++){let e,s={...n[a],...o[a]};u.put(s,null,e=!1,(e=>{e instanceof Error?(loge("cruds.update_many: Error:",e),y.push(null)):y.push(s),fts.update_fts_u(t,d[a].id,d[a]),++l==n.length&&f()}))}await b;var w=[];for(let t of y){let a=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),e=utils.json_to_obj_bd(a);e.id=t.id,w.push(e)}return c.close(),w}loge("cruds.update_many: Static key not set")}static async upsert_one(t,a,e){if(null!=idbxs.Skey){t="#"+t;var s=await idbxs.obj_to_sobj_full(e),i={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);var r=await crud.find_one(t,i,_secure),o=await wcrypto.decrypt_aes_fiv(r.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);return _={..._,...e},o=utils.obj_to_json(_),s.Etds_Obj=(await wcrypto.encrypt_aes_fiv(o,idbxs.Skey))[0],await crud.upsert_one(t,i,s,_secure,_)}loge("cruds.upsert_one: Static key not set")}static async remove_one(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var s=await crud.find_one(t,e,_secure);if(null==s)return null;var i=await wcrypto.decrypt_aes_fiv(s.Etds_Obj,idbxs.Skey),r=utils.json_to_obj_bd(i);r.id=s.id,await crud.remove_one(t,e,_secure,r)}else loge("cruds.remove_one: Static key not set")}static async remove_many(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var s=[],i=await crud.find_many(t,e,_secure);if(null==i||0==i.length)return null;for(let t of i){var r=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),o=utils.json_to_obj_bd(r);o.id=t.id,s.push(o)}await crud.remove_many(t,e,_secure,s)}else loge("cruds.remove_many: Static key not set")}static init(){}}export default cruds;