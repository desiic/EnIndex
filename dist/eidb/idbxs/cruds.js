import base from"../base.js";import crud from"../idbx/crud.js";import fts from"../idbx/fts.js";import idbxs from"../idbxs.js";import wcrypto from"../wcrypto.js";import utils from"../utils.js";const log=console.log,logw=console.warn,loge=console.error,new_lock=base.new_lock;class cruds{static async insert_one(t,a){if(null!=idbxs.Skey){t="#"+t;var e=await idbxs.obj_to_sobj(t,a);return await crud.insert_one(t,e,_secure,a)}loge("cruds.insert_one: Static key not set")}static async insert_many(t,a){if(null!=idbxs.Skey){t="#"+t;var e=[];for(let i of a)e.push(await idbxs.obj_to_sobj(t,i));return await crud.insert_many(t,e,_secure,a)}loge("cruds.insert_many: Static key not set")}static async get_1stcond_obj(t,a){}static async get_1stcond_objs(t,a){}static async intersect_cond(t,a){}static async intersect_cond_getobjs(t,a){}static async exists(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)"id"==t?e[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);return await crud.exists(t,e,_secure)}loge("cruds.exists: Static key not set")}static async count(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)"id"==t?e[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);return await crud.count(t,e,_secure)}loge("cruds.count: Static key not set")}static async count_all(t){if(null!=idbxs.Skey)return t="#"+t,await crud.count_all(t,_secure);loge("cruds.count_all: Static key not set")}static async find_one(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)"id"==t?e[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var i=await crud.find_one(t,e,_secure);if(null==i)return null;var s=await wcrypto.decrypt_aes_fiv(i.Etds_Obj,idbxs.Skey),r=utils.json_to_obj_bd(s);return r.id=i.id,r}loge("cruds.find_one: Static key not set")}static async find_many(t,a,e=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)"id"==t?i[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?i[t]=await idbxs.array_to_sarray(a[t]):i[t]=await idbxs.value_to_svalue(a[t]);var s=await crud.find_many(t,i,e,_secure),r=[];for(let t of s){var o=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);_.id=t.id,r.push(_)}return r}loge("cruds.find_many: Static key not set")}static async find_all(t){if(null!=idbxs.Skey){t="#"+t;var a=await crud.find_all(t,_secure),e=[];for(let t of a){var i=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey);if(null!=i){var s=utils.json_to_obj_bd(i);s.id=t.id,e.push(s)}}return e}loge("cruds.find_all: Static key not set")}static get_proppath_value(t,a){}static obj_matches_cond(t,a){}static async filter(t,a,e=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var i={};for(let t in a)i[t]="id"==t?a[t]:await idbxs.value_to_svalue(a[t]);var s=await crud.filter(t,i,e,_secure),r=[];for(let t of s){var o=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);_.id=t.id,r.push(_)}return r}loge("cruds.filter: Static key not set")}static async update_one(t,a,e){if(null!=idbxs.Skey){t="#"+t;var i=await idbxs.obj_to_sobj_full(e),s={};for(let t in a)"id"==t?s[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?s[t]=await idbxs.array_to_sarray(a[t]):s[t]=await idbxs.value_to_svalue(a[t]);var r=await crud.find_one(t,s,_secure),o=await wcrypto.decrypt_aes_fiv(r.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);_={..._,...e},o=utils.obj_to_json(_),i.Etds_Obj=(await wcrypto.encrypt_aes_fiv(o,idbxs.Skey))[0];var n=await crud.update_one(t,s,i,_secure,_);o=await wcrypto.decrypt_aes_fiv(n.Etds_Obj,idbxs.Skey);return(_=utils.json_to_obj_bd(o)).id=n.id,_}loge("cruds.update_one: Static key not set")}static async update_many(t,a,e,i=Number.MAX_SAFE_INTEGER){if(null!=idbxs.Skey){t="#"+t;var s=utils.deepcopy(e);delete s.id,e=s;var r=await idbxs.obj_to_sobj_full(e),o=[],_={};for(let t in a)"id"==t?_[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?_[t]=await idbxs.array_to_sarray(a[t]):_[t]=await idbxs.value_to_svalue(a[t]);var n=await crud.find_many(t,_,_secure),d=[];for(let t of n){let a=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),i=utils.json_to_obj_bd(a);i={...i,...e,id:t.id},a=utils.obj_to_json(i),d.push(i);let s=utils.deepcopy(r);s.Etds_Obj=(await wcrypto.encrypt_aes_fiv(a,idbxs.Skey))[0],o.push(s)}var c=await eidb.reopen(),u=c.transaction(t,RW).store1(),l=0,y=[],[b,f]=new_lock();for(let a=0;a<n.length;a++){let e,i={...n[a],...o[a]};u.put(i,null,e=!1,(e=>{e instanceof Error?(loge("cruds.update_many: Error:",e),y.push(null)):y.push(i),fts.update_fts_u(t,d[a].id,d[a]),++l==n.length&&f()}))}await b;var w=[];for(let t of y){let a=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),e=utils.json_to_obj_bd(a);e.id=t.id,w.push(e)}return c.close(),w}loge("cruds.update_many: Static key not set")}static async upsert_one(t,a,e){if(null!=idbxs.Skey){t="#"+t;var i=await idbxs.obj_to_sobj_full(e),s={};for(let t in a)"id"==t?s[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?s[t]=await idbxs.array_to_sarray(a[t]):s[t]=await idbxs.value_to_svalue(a[t]);var r=await crud.find_one(t,s,_secure),o=await wcrypto.decrypt_aes_fiv(r.Etds_Obj,idbxs.Skey),_=utils.json_to_obj_bd(o);return _={..._,...e},o=utils.obj_to_json(_),i.Etds_Obj=(await wcrypto.encrypt_aes_fiv(o,idbxs.Skey))[0],await crud.upsert_one(t,s,i,_secure,_)}loge("cruds.upsert_one: Static key not set")}static async remove_one(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)"id"==t?e[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var i=await crud.find_one(t,e,_secure);if(null==i)return null;var s=await wcrypto.decrypt_aes_fiv(i.Etds_Obj,idbxs.Skey),r=utils.json_to_obj_bd(s);r.id=i.id,await crud.remove_one(t,e,_secure,r)}else loge("cruds.remove_one: Static key not set")}static async remove_many(t,a){if(null!=idbxs.Skey){t="#"+t;var e={};for(let t in a)"id"==t?e[t]=a[t]:a[t]instanceof Array&&t.indexOf(",")>=0?e[t]=await idbxs.array_to_sarray(a[t]):e[t]=await idbxs.value_to_svalue(a[t]);var i=[],s=await crud.find_many(t,e,_secure);if(null==s||0==s.length)return null;for(let t of s){var r=await wcrypto.decrypt_aes_fiv(t.Etds_Obj,idbxs.Skey),o=utils.json_to_obj_bd(r);o.id=t.id,i.push(o)}await crud.remove_many(t,e,_secure,i)}else loge("cruds.remove_many: Static key not set")}static init(){}}export default cruds;