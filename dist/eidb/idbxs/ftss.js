import fts from"../idbx/fts.js";import idbxs from"../idbxs.js";import wcrypto from"../wcrypto.js";import utils from"../utils.js";const log=console.log,logw=console.warn,loge=console.error,_secure=!0;class ftss{static enable_fts(){fts.enable_fts()}static disable_fts(){fts.disable_fts()}static str_to_unique_words(t){}static obj_to_unique_words(t){}static async obj_exists(t,s,e){}static async increase_num_objs(t,s,e){}static async decrease_num_objs(t,s,e){}static async update_fts(t,s,e,_){}static update_fts_c(t,s,e){fts.update_fts_c(t,s,e,true)}static update_fts_r(t,s,e){}static update_fts_u(t,s,e){fts.update_fts_u(t,s,e,true)}static update_fts_d(t,s,e){fts.update_fts_d(t,s,e,true)}static async#t(t,s,e,_){}static#s(t,s){}static async find_many_by_terms(t,s,e=1e3){if(null!=idbxs.Skey){t="#"+t;var _=await fts.find_many_by_terms(t,s,e,true);for(let t=0;t<_.Items.length;t++){let s=_.Items[t].Object,e=await wcrypto.decrypt_aes_fiv(s.Etds_Obj,idbxs.Skey),a=utils.json_to_obj_bd(e);a.id=s.id,_.Items[t]=a}for(let t=0;t<_.Search_Terms.length;t++)_.Search_Terms[t]=await wcrypto.decrypt_aes_fiv(_.Search_Terms[t],idbxs.Skey);for(let t=0;t<_.Excluded_Terms.length;t++)_.Excluded_Terms[t]=await wcrypto.decrypt_aes_fiv(_.Excluded_Terms[t],idbxs.Skey);return _}loge("[EI] ftss.find_many_by_terms: Static key not set")}static init(){}}export default ftss;