import eidb from"../eidb.js";import idb from"./idb.js";import crud from"./idbx/crud.js";import op_hist from"./idbx/op-hist.js";import fts from"./idbx/fts.js";var log=console.log,logw=console.warn,loge=console.error,obj2json=JSON.stringify,json2obj=JSON.parse;const n1=1,n2=2,u1=3,u2=4;var _DEFAULT_INDICES={_meta:{Store:3},op_hist:{Store_Name:1},"#op_hist":{},fts_words:{Store:1,Word:1,"Store,Word":3,num_obj_ids:1},fts_ids:{Store:1,Word:1,"Store,Word":1,obj_id:1,"Store,obj_id":1,"Store,Word,obj_id":3},"#fts_words":{Store:1,Word:1,"Store,Word":3,num_obj_ids:1},"#fts_ids":{Store:1,Word:1,"Store,Word":1,obj_id:1,"Store,obj_id":1,"Store,Word,obj_id":3}};class idbx{SUB_NAMESPACES;static crud;static op_hist;static fts;PROPERTIES;static Indices={};METHODS;static#e(e,t){if(null==localStorage.Unused_Stores||0==localStorage.Unused_Stores.trim().length)return!1;if(-1==e.Object_Store_Names.indexOf(t))return!1;return json2obj(localStorage.Unused_Stores).indexOf(t)>=0}static#t(e){if(null==localStorage.Unused_Stores||0==localStorage.Unused_Stores.trim().length)return!1;var t=e.Object_Store_Names,o=json2obj(localStorage.Unused_Stores),i=[];for(let e of o)t.indexOf(e)>=0&&i.push(e);localStorage.Unused_Stores=obj2json(i)}static#o(e,t){if("add"==e)if(null==localStorage.Unused_Stores||0==localStorage.Unused_Stores.trim().length)localStorage.Unused_Stores=obj2json([t]);else{let e=json2obj(localStorage.Unused_Stores);e=Array.from(new Set([...e,t])),localStorage.Unused_Stores=obj2json(e)}else if("remove"==e)if(null==localStorage.Unused_Stores||0==localStorage.Unused_Stores.trim().length)localStorage.Unused_Stores=obj2json([]);else{let e=json2obj(localStorage.Unused_Stores),o=e.indexOf(t);o>=0&&e.splice(o,1),localStorage.Unused_Stores=obj2json(e)}}static indexname_to_keypath(e){return e.indexOf(",")>=0?e.split(","):e}static keypath_to_indexname(e){return e.constructor===Array?e.join(","):e}static async db_exists(e){return-1!=(await idb.databases()).map((e=>e.name)).indexOf(e)}static async get_cur_indices(e){if(!await thisclass.db_exists(e))return{};var t=await idb.open(e),o={},i=t.transaction(t.Object_Store_Names,RO);for(let e of t.Object_Store_Names){if(idbx.#e(t,e))continue;let s=i.object_store(e);o[e]={};for(let t of s.Index_Names){let i=s.index(t),d=i.Key_Path;var r=idbx.keypath_to_indexname(d);let n,a=i.unique,_=i.multientry;0==a&&0==_?n=1:0==a&&1==_?n=2:1==a&&0==_?n=3:1==a&&1==_&&(n=4),o[e][r]=n}}return t.close(),o}static add_more_indices(e){return{...e,..._DEFAULT_INDICES}}static indices2str(e){var t=[];for(let o in e)for(let i in e[o]){let r=e[o][i];t.push(`${o}/${i}:${r};`)}return t.sort(),t.join("")}static async get_cur_db_ver(e){var t=await idb.open(e),o=t.version;return t.close(),o}static async upgrade_db(e,t,o){if(await thisclass.db_exists(e))var i=await idbx.get_cur_db_ver(e)+1;else i=0+1;log("[EI] idbx.upgrade_db: Upgrading to version",i);var r=await idb.open(e,i),s=Object.keys(t),d=Object.keys(o),n=[];for(let e of s)-1==d.indexOf(e)&&n.push(e);for(let e of n)log("[EI] idbx.upgrade_db: Found unused store:",e),idbx.#o("add",e);var a=[];for(let e of d)-1==s.indexOf(e)&&(idbx.#e(r,e)?(t[e]={},idbx.#o("remove",e)):a.push(e));for(let e of a){log("[EI] idbx.upgrade_db: Creating new store:",e);let t=r.create_object_store(e);for(let i in o[e]){let r=o[e][i],s=idbx.indexname_to_keypath(i);log("[EI] idbx.upgrade_db: Creating new index:",e,"/",i),t.create_index(i,s,r)}}var _=[],l=Array.from(new Set([...s,...d]));for(let e of l)-1==n.indexOf(e)&&-1==a.indexOf(e)&&_.push(e);var b=r.Transaction;for(let e of _){let i=b.object_store(e),r=Object.keys(t[e]),s=Object.keys(o[e]),d=[],n=[];for(let t of r)-1==s.indexOf(t)&&(log("[EI] idbx.upgrade_db: Deleting unused index:",e,"/",t),i.delete_index(t),d.push(t));for(let t of s)if(-1==r.indexOf(t)){let r=o[e][t],s=idbx.indexname_to_keypath(t);log("[EI] idbx.upgrade_db: Creating new index:",e,"/",t),i.create_index(t,s,r),n.push(t)}let a=[],_=Array.from(new Set([...r,...s]));for(let e of _)-1==d.indexOf(e)&&-1==n.indexOf(e)&&a.push(e);for(let r of a)if(o[e][r]!=t[e][r]){let t=o[e][r],s=idbx.indexname_to_keypath(r);log("[EI] idbx.upgrade_db: Updating index to new type:",e,"/",r+":"+t),i.delete_index(r),i.create_index(r,s,t)}}r.close()}static async open_av(e,t){if(null!=e){if(null!=t){t=idbx.add_more_indices(t);for(let e in t)t[e].id=3;idbx.Indices=t;var o=(await idb.databases()).map((e=>e.name));window._Db_Name=e;var i=t;if(o.indexOf(e)>=0)var r=await idbx.get_cur_indices(e);else r={};var s=idbx.indices2str(r);if(idbx.indices2str(i)==s)return await idb.open(e);await idbx.upgrade_db(e,r,i);var d=await idb.open(e);return idbx.#t(d),d}loge("[EI] idbx.open_av: Indices name cannot be null")}else loge("[EI] idbx.open_av: Db name cannot be null")}static async reopen(){return await idb.open(window._Db_Name)}static num_db_cons(){return window._num_db_cons}static set_db(e){window._Db_Name=e}static async get_prop(e,t){if(null!=window._Db_Name&&0!=window._Db_Name.trim().length)return(await idb.open(window._Db_Name)).transaction(e,RW).store1()[t];loge("[EI] idbx.get_prop: Call 'idb.open', 'idbx.open_av', or 'idbx.set_db' first")}static async do_op(e,t,...o){if(null!=window._Db_Name&&0!=window._Db_Name.trim().length){var i=(await idb.open(window._Db_Name)).transaction(e,RW).store1();return await i[t](...o)}loge("[EI] idbx.do_op: Call 'idb.open', 'idbx.open_av', or 'idbx.set_db' first")}static async del_obj_store(e,t){var o=await idbx.get_cur_db_ver(e)+1,i=await idb.open(e,o);i instanceof Error?loge(`[EI] idbx.del_obj_store: Failed to delete object store '${t}' in db '${e}', error:`,i):(await i.delete_object_store(t),idbx.#o("remove",t),i.close())}static init(){idbx.crud=crud,idbx.op_hist=op_hist,idbx.fts=fts,idbx.crud.init(),idbx.op_hist.init(),idbx.fts.init()}}const thisclass=idbx;export default thisclass;