var log=console.log,Curve={p:0,n:0,gx:0,gy:0};function mod(n,t=Curve.p){const e=n%t;return e>=0n?e:t+e}function invert(n,t=Curve.p){if(0n===n||t<=0n)throw new Error(`invert: Expected positive integers, got n=${n} mod=${t}`);let e=mod(n,t),o=t,[r,i,u,s]=[0n,1n,1n,0n];for(;0n!==e;){const n=o/e,t=o%e,d=r-u*n,c=i-s*n;[o,e]=[e,t],[r,i]=[u,s],[u,s]=[d,c]}if(1n!==o)throw new Error("invert: Does not exist(?)");return mod(r,t)}class Point{static ZERO=new Point(0n,0n);constructor(n,t){this.x=n,this.y=t}double(){const n=this.x,t=this.y,e=mod(3n*n**2n*invert(2n*t,Curve.p)),o=mod(e*e-2n*n),r=mod(e*(n-o)-t);return new Point(o,r)}add(n){const[t,e]=[this,n],[o,r,i,u]=[t.x,t.y,e.x,e.y];if(0n===o||0n===r)return e;if(0n===i||0n===u)return t;if(o===i&&r===u)return this.double();if(o===i&&r===-u)return Point.ZERO;const s=mod((u-r)*invert(i-o,Curve.p)),d=mod(s*s-o-i),c=mod(s*(o-d)-r);return new Point(d,c)}multiply_da(n){let t=Point.ZERO,e=this;for(;n>0n;)1n&n&&(t=t.add(e)),e=e.double(),n>>=1n;return t}}function set_curve(n,t,e,o){Curve={p:n,n:t,gx:e,gy:o}}function get_pubkey_point(n,t){return n instanceof Array&&(n=new Point(n[0],n[1])),n.multiply_da(t)}export{Point,set_curve,get_pubkey_point};